"""
27. 内部リンクの除去
26の処理に加えて，テンプレートの値からMediaWikiの内部リンクマークアップを除去し，テキストに変換せよ（参考: マークアップ早見表）．
内部リンク	
[[記事名]]	記事名
[[記事名|表示文字]]	表示文字
[[記事名#節名|表示文字]]	表示文字
"""

from q25 import get_basic_info
import re


def get_cleaned_data():
    key_value = get_basic_info()

    # https://docs.python.org/ja/3/library/re.html#re.sub
    # (?:...)
    # 普通の丸括弧の、キャプチャしない版です。丸括弧で囲まれた正規表現にマッチしますが、このグループがマッチした部分文字列は、マッチを実行したあとで回収することも、そのパターン中で以降参照することも できません 。
    # 文字列型 repl 引数では、上で述べた文字エスケープや後方参照に加えて、 
    # \g<name> は (?P<name>...) 構文で定義された name という名前のグループがマッチした部分文字列を使い、 
    # \g<number> は対応するグループ番号を使います。よって \g<2> は \2 と等価ですが、 \g<2>0 のような置換
    # においても曖昧になりません。 \20 は、グループ 20 への参照として解釈され、グループ 2 への参照にリテラル文字
    # '0' が続いたものとしては解釈されません。後方参照 \g<0> は正規表現とマッチした部分文字列全体で置き換わります。

    # *?, +?, ??
    # '*' 、 '+' 、および '?' 修飾子は全て 貪欲 (greedy) マッチで、できるだけ多くのテキストにマッチします。この挙動が望ましくない時もあります。例えば正規表現 <.*> が '<a> b <c>' に対してマッチされると、 '<a>' だけでなく文字列全体にマッチしてしまいます。修飾子の後に ? を追加すると、 非貪欲 (non-greedy) あるいは 最小 (minimal) のマッチが行われ、できるだけ 少ない 文字にマッチします。正規表現 <.*?> を使うと '<a>' だけにマッチします。
    # [^\]]+
    #  [^5] は '5' を除くあらゆる文字にマッチ
    pattern1 = re.compile(r'''
        \[\[
            (?:[^\]]+\|)
            (.+?)
        \]\]
    ''', re.VERBOSE)

    #('元首等肩書', '[[イギリスの君主|女王]]'))
    #→[[女王]]
    #('元首等肩書', '女王'), ('元首等肩書', '[[イギリスの君主|女王]]'))

    # (('確立形態3', '1800年連合法）'), ('確立形態3', '[[グレートブリテン及びアイルランド連合王国]]建国<br />（[[連合法 (1800年)|1800年連合法]]）'))
    # 

    pattern2 = re.compile(r'''
        \[\[
            (.+?)
        \]\]
    ''', re.VERBOSE)

    #(('確立形態3', 'グレートブリテン及びアイルランド連合王国建国<br />（連合法 (1800年)|1800年連合法）'), ('確立形態3', '[[グレートブリテン及びアイルランド連合王国]]建国<br />（[[連合法 (1800年)|1800年連合法]]）'))

    # https://qiita.com/hidei/items/05634f810212e8ce0870
    # re.sub(r'(hoge)', '\\1bar', 'hogefoo')
    # re.sub(r'(第)三', '\g<1>3', '第三')
    # zip(result, key_value)

    result1 = [(key, re.sub(r'\'\'+', '', value)) for (key, value) in key_value]
    result2 = [(key, re.sub(pattern1, "\g<1>", value) ) for (key, value) in result1]
    # value = 'abcde'
    # patten1 = r'a(bcd)e'
    # \g<1> = "bcd"
    # results = "bcd"
    result3 = [(key, re.sub(pattern2, "\g<1>", value) ) for (key, value) in result2]
    # (('国章リンク', '（国章）'), ('国章リンク', '（[[イギリスの国章|国章]]）'))
    # print('\n'.join(map(str, zip(result3, key_value))))
    return result3
    #'''強調される文字'''
    #('確立形態3', '[[グレートブリテン及びアイルランド連合王国]]建国<br />（[[連合法 (1800年)|1800年連合法]]）'))
    # → ('確立形態3', 'グレートブリテン及びアイルランド連合王国建国<br />（1800年連合法）'))
    # Answer ('確立形態3', 'グレートブリテン及びアイルランド連合王国建国<br />（1800年連合法）'))